package streamer

import (
	"context"
	"log"

	"github.com/MrAutismo/eventstore/pkg/bootstrap"
	pb "github.com/MrAutismo/eventstore/pkg/pb/eventstorepb/v1"
	"github.com/sirupsen/logrus"
)

type EventHandler interface {
	Handle(ctx context.Context, evt *pb.Event) error
}

type Streamer struct {
	client  pb.EventStoreClient
	handler EventHandler
}

func NewStreamer(handler EventHandler) *Streamer {
	return &Streamer{
		client:  bootstrap.NewEventStoreClient(),
		handler: handler,
	}
}

func (s *Streamer) Stream(ctx context.Context, domain, name string) {
	stream, err := s.client.StreamEvents(
		ctx, &pb.StreamEventsRequest{
			Domain: domain,
			Name:   name,
		},
	)
	if err != nil {
		log.Fatalf("Failed to stream events: %v", err)
	}

	logrus.Info("Listening for events...")
	for {
		resp, err := stream.Recv()
		if err != nil {
			logrus.Fatalf("Stream error: %v", err)
		}
		evt := resp.GetEvent()
		logrus.Infof("Received event: %+v\n", evt)
		s.handle(evt)

	}
}

func (s *Streamer) handle(evt *pb.Event) {
	ctx := context.Background()
	err := s.handler.Handle(ctx, evt)
	if err != nil {
		logrus.Fatalf("Failed to handle event: %v", err)
	}

}
